<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.innovate.cms.modules.qs.dao.sns.QxFollowDao">

	<sql id="qxFollowColumns">
		a.flid AS "flid",
		a.uid AS "uid",
		a.follow_uid AS
		"followUid",
		a.follow_img AS "followImg",
		a.follow_name AS "followName",
		a.update_time AS "updateTime",
		a.create_time AS "createTime",
		a.del_flag AS "delFlag"
	</sql>

	<sql id="qxFollowJoins">
	</sql>
	<insert id="storeT0results">
		INSERT IGNORE INTO qx_recommend_user (
			uid,
			nickname,
			headimgurl,
			result,
			done_date
		) SELECT
			uid,
			nickname,
			headimgurl,
			#{result} AS result,
			#{currentDay} AS done_date
		FROM
			system_user
		WHERE
			uid = #{uid}
	</insert>
	



	<select id="get" resultType="QxFollow">
		SELECT
		<include refid="qxFollowColumns" />
		FROM qx_follow a
		<include refid="qxFollowJoins" />
		WHERE a.flid = #{flid}
	</select>

	<select id="isExist" resultType="int">
		SELECT
		count(1)
		FROM
		qx_follow AS f
		WHERE
		f.follow_uid = #{followUid}
		AND f.uid = #{uid}
	</select>

	<select id="isExistNew" resultType="int">
		SELECT
		count(1)
		FROM
		qx_follow AS f
		WHERE
		f.follow_uid = #{followUid}
		AND f.uid = #{uid}
		AND f.del_flag = '0'
	</select>
	<select id="findList" resultType="QxFollow">
		SELECT
		<include refid="qxFollowColumns" />
		FROM qx_follow a
		<include refid="qxFollowJoins" />
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="flid != null and flid != ''">
				AND a.flid = #{flid}
			</if>
			<if test="uid != null and uid != ''">
				AND a.uid = #{uid}
			</if>
			<if test="followUid != null and followUid != ''">
				AND a.follow_uid = #{followUid}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>

	<select id="findAllList" resultType="QxFollow">
		SELECT
		<include refid="qxFollowColumns" />
		FROM qx_follow a
		<include refid="qxFollowJoins" />
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>

	<select id="findFrindList" resultType="com.innovate.cms.modules.qs.entity.sns.QxFriend">
		SELECT
			a.follow_uid as followUid,
			a.follow_img as followImg,
			a.follow_name as followName,
			u.personal_signature AS personalSignature,
			u.sex AS sex
		FROM qx_follow a,system_user AS u
		<where>
			a.uid = #{uid} AND
			a.del_flag = '0'
			AND a.follow_uid = u.uid
		</where>
	</select>







	

	<select id="getFriendsNum" resultType ="int">
		SELECT
			COUNT(qf.follow_uid)
		FROM
			qx_follow qf
		WHERE
			qf.uid = #{uid}
		AND qf.del_flag = '0'
	</select>
	


	<insert id="insert">
		INSERT INTO qx_follow(
		flid,
		uid,
		follow_uid,
		follow_img,
		follow_name,
		update_time,
		create_time,
		del_flag
		) VALUES (
		#{flid},
		#{uid},
		#{followUid},
		#{followImg},
		#{followName},
		#{updateTime},
		#{createTime},
		#{delFlag}
		)
	</insert>

	<insert id="saveFollow">
		INSERT INTO qx_follow(
		flid,
		uid,
		unionid,
		img,
		name,
		follow_unionid,
		follow_uid,
		follow_img,
		follow_name,
		update_time,
		create_time,
		del_flag
		) VALUES (
		#{flid},
		#{uid},
		#{unionid},
		#{img},
		#{name},
		#{followUnionid},
		#{followUid},
		#{followImg},
		#{followName},
		#{updateTime},
		#{createTime},
		#{delFlag}
		)
	</insert>

	<insert id="saveFollows">
		INSERT INTO qx_follow(
			`flid`,
			`uid`,
			`unionid`,
			`img`,
			`name`,
			`follow_unionid`,
			`follow_uid`,
			`follow_img`,
			`follow_name`,
			`create_time`
		)SELECT
			#{flid},
			tf.uid,
			su.unionid,
			su.headimgurl AS "img",
			su.nickname AS "name",
			su1.unionid AS "follow_unionid",
			tf.follow_uid,
			tf.follow_img,
			tf.follow_name,
			now()AS "create_time"
		FROM
			temp_follow AS tf,
			system_user AS su,
			system_user AS su1
		WHERE
			tf.tfid = #{addid}
		AND tf.uid = su.uid
		AND tf.follow_uid = su1.uid
		ON DUPLICATE KEY UPDATE del_flag='0'
	</insert>





	<update id="update">
		UPDATE qx_follow SET
		flid = #{flid},
		uid = #{uid},
		follow_uid = #{followUid},
		follow_img = #{followImg},
		follow_name = #{followName},
		update_time = #{updateTime},
		create_time = #{createTime}
		WHERE flid = #{flid}
	</update>

	<update id="updateFollow">
		UPDATE qx_follow AS f SET
		del_flag = #{delFlag}
		WHERE
		f.follow_uid = #{followUid}
		AND f.uid = #{uid}
	</update>
	<update id="updateFollowInfo">
		UPDATE qx_follow
		SET name = (
			CASE uid
			WHEN #{uid} THEN
				#{nickname}
			ELSE
				name
			END
		),
		 img = (
			CASE uid
			WHEN #{uid} THEN
				#{headimgurl}
			ELSE
				img
			END
		),
		 follow_name = (
			CASE follow_uid
			WHEN #{uid} THEN
				#{nickname}
			ELSE
				follow_name
			END
		),
		 follow_img = (
			CASE follow_uid
			WHEN #{uid} THEN
				#{headimgurl}
			ELSE
				follow_img
			END
		)
		WHERE
			
			uid = #{uid}
			OR follow_uid = #{uid}
	</update>

	<update id="delete">
		UPDATE qx_follow SET
		del_flag = #{DEL_FLAG_DELETE}
		WHERE flid = #{flid}
	</update>

</mapper>