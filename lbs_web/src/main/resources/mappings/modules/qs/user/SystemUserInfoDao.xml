<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.innovate.cms.modules.qs.dao.user.SystemUserInfoDao">
    
	<sql id="systemUserInfoColumns">
		a.uid AS "uid",
		a.unionid AS "unionid",
		a.openid AS "openid",
		a.access_token AS "accessToken",
		a.refresh_token AS "refreshToken",
		a.expires_in AS "expiresIn",
		a.web_access_token AS "webAccessToken",
		a.web_refresh_token AS "webRefreshToken",
		a.web_expires_in AS "webExpiresIn",
		a.login_ip AS "loginIp",
		a.login_date AS "loginDate",
		a.remarks AS "remarks",
		a.update_time AS "updateTime",
		a.del_flag AS "delFlag"
	</sql>
	<resultMap type="com.innovate.cms.modules.data.entity.RandomTwoUserToJson"
		id="randomTwoUserList">
		<result property="uid" column="uid" />
		<result property="nickname" column="nickname" />
		<result property="headimgurl" column="headimgurl" />
		<collection property="questions"
			ofType="com.innovate.cms.modules.qs.entity.ques.QuestionAnswer">
			<result property="qid" column="qid" />
			<result property="answer" column="answer" />
		</collection>
	</resultMap>
	<sql id="systemUserInfoJoins">
	</sql>
    
	<select id="get" resultType="SystemUserInfo">
		SELECT 
			<include refid="systemUserInfoColumns"/>
		FROM system_user_info a
		<include refid="systemUserInfoJoins"/>
		WHERE a.uid = #{uid}
	</select>
	
	<select id="findList" resultType="SystemUserInfo">
		SELECT 
			<include refid="systemUserInfoColumns"/>
		FROM system_user_info a
		<include refid="systemUserInfoJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="uid != null and uid != ''">
				AND a.uid = #{uid}
			</if>
			<if test="unionid != null and unionid != ''">
				AND a.unionid = #{unionid}
			</if>
			<if test="openid != null and openid != ''">
				AND a.openid = #{openid}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="SystemUserInfo">
		SELECT 
			<include refid="systemUserInfoColumns"/>
		FROM system_user_info a
		<include refid="systemUserInfoJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO system_user_info(
			uid,
			unionid,
			openid,
			access_token,
			refresh_token,
			expires_in,
			web_access_token,
			web_refresh_token,
			web_expires_in,
			login_ip,
			login_date,
			remarks,
			update_time,
			del_flag
		) VALUES (
			#{uid},
			#{unionid},
			#{openid},
			#{accessToken},
			#{refreshToken},
			#{expiresIn},
			#{webAccessToken},
			#{webRefreshToken},
			#{webExpiresIn},
			#{loginIp},
			#{loginDate},
			#{remarks},
			#{updateTime},
			#{delFlag}
		)
	</insert>
	<insert id="insertInfo">
		INSERT INTO system_user_info(
			uid,
			unionid,
			openid,
			access_token,
			refresh_token,
			expires_in,
			web_access_token,
			web_refresh_token,
			web_expires_in,
			login_ip,
			login_date,
			remarks
		) VALUES (
			#{uid},
			#{unionid},
			#{openid},
			#{accessToken},
			#{refreshToken},
			#{expiresIn},
			#{webAccessToken},
			#{webRefreshToken},
			#{webExpiresIn},
			#{loginIp},
			#{loginDate},
			#{remarks}
		)
	</insert>
	
	<update id="updateInfo">
		UPDATE system_user_info SET 
			access_token = #{accessToken},
			refresh_token = #{refreshToken},
			expires_in = #{expiresIn},
			web_access_token = #{webAccessToken},
			web_refresh_token = #{webRefreshToken},
			web_expires_in = #{webExpiresIn},
			login_ip = #{loginIp},
			login_date = #{loginDate}
		WHERE uid = #{uid}
	</update>	
	
	<update id="update">
		UPDATE system_user_info SET 	
			uid = #{uid},
			unionid = #{unionid},
			openid = #{openid},
			access_token = #{accessToken},
			refresh_token = #{refreshToken},
			expires_in = #{expiresIn},
			web_access_token = #{webAccessToken},
			web_refresh_token = #{webRefreshToken},
			web_expires_in = #{webExpiresIn},
			login_ip = #{loginIp},
			login_date = #{loginDate},
			remarks = #{remarks},
			update_time = #{updateTime}
		WHERE uid = #{uid}
	</update>
	
	<update id="delete">
		UPDATE system_user_info SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE uid = #{uid}
	</update>
	
	<select id="getBubbleNorminate" resultType="com.innovate.cms.modules.data.entity.BubbleInfoToJson">
		SELECT
			d5.uid AS "uid",
			d5.headimgurl AS "headImgUrl",
			d5.nickname AS "nickname",
			qf2.foot_type AS "footType",
			qf2.foot_to_id AS "gid",
			qf2.foot_content AS "groupName",
			0 AS "type"
		FROM
			(
				SELECT
					c4.uid,
					c4.headimgurl,
					c4.nickname,
					MAX(qf.footid)AS "footid"
				FROM
					(
						(
							SELECT DISTINCT
								t2.uid,
								t2.headimgurl,
								t2.nickname
							FROM
								(
									SELECT
										@rownum :=@rownum + 1 rownum,
										t1.uid,
										t1.headimgurl,
										t1.nickname
									FROM
										(
											SELECT
												@rownum := 0,
												a1.uid,
												a2.login_date,
												a1.headimgurl,
												a1.nickname
											FROM
												system_user AS a1,
												system_user_info AS a2
											WHERE
												a1.uid = a2.uid
											AND a1.sex = 2 
								  <![CDATA[ AND a2.login_date >(NOW() - INTERVAL 30 * 24 HOUR) ]]>
										)t1
								)t2,
								(
									SELECT
										round(RAND() *(1 - b1.num) + b1.num)AS "rands"
									FROM
										(
											SELECT
												COUNT('x')AS "num"
											FROM
												system_user AS a1,
												system_user_info AS a2
											WHERE
												a1.uid = a2.uid
											AND a1.sex = 2 
								  <![CDATA[ AND a2.login_date >(NOW() - INTERVAL 30 * 24 HOUR) ]]>
										)b1,
										(
											SELECT
												ct.ctid
											FROM
												crosstab AS ct
											WHERE
					 				 <![CDATA[  ct.ctid < 11 ]]>
										)b2
								)b3
							WHERE
								t2.rownum = b3.rands
							LIMIT #{womanNum}
						)
						UNION
							(
								SELECT DISTINCT
									t2.uid,
									t2.headimgurl,
									t2.nickname
								FROM
									(
										SELECT
											@rownum :=@rownum + 1 rownum,
											t1.uid,
											t1.headimgurl,
											t1.nickname
										FROM
											(
												SELECT
													@rownum := 0,
													a1.uid,
													a2.login_date,
													a1.headimgurl,
													a1.nickname
												FROM
													system_user AS a1,
													system_user_info AS a2
												WHERE
													a1.uid = a2.uid
												AND a1.sex = 1 
									  <![CDATA[ AND a2.login_date >(NOW() - INTERVAL 30 * 24 HOUR)]]>
											)t1
									)t2,
									(
										SELECT
											round(RAND() *(1 - b1.num) + b1.num)AS "rands"
										FROM
											(
												SELECT
													COUNT('x')AS "num"
												FROM
													system_user AS a1,
													system_user_info AS a2
												WHERE
													a1.uid = a2.uid
												AND a1.sex = 1 
									  <![CDATA[ AND a2.login_date >(NOW() - INTERVAL 30 * 24 HOUR)]]>
											)b1,
											(
												SELECT
													ct.ctid
												FROM
													crosstab AS ct
												WHERE
										  <![CDATA[ ct.ctid < 11 ]]>
											)b2
									)b3
								WHERE
									t2.rownum = b3.rands
								LIMIT #{manNum}
							)
					)c4
				LEFT JOIN qx_footprint AS qf ON c4.uid = qf.uid
				GROUP BY
					c4.uid
				ORDER BY
					c4.uid,
					qf.create_time DESC
			)d5
		LEFT JOIN qx_footprint AS qf2 ON d5.footid = qf2.footid
	</select>
	
	<select id="getRandomTwoUser" resultMap="randomTwoUserList">
		SELECT
			c.uid,
			su.nickname,
			su.headimgurl,
			qha.qid,
			qha.answer
		FROM
			(
				SELECT
					b.uid
				FROM
					(
						SELECT
							a.uid
						FROM
							(
								SELECT
									qh.uid
								FROM
									qx_history qh
								WHERE
									qh.gid = #{gid}
								AND qh.uid != #{uid}
								AND qh.del_flag = '0'
								ORDER BY qh.create_time DESC
								LIMIT 200
							) a
						WHERE
							NOT EXISTS (
								SELECT
									qf.follow_uid
								FROM
									qx_follow qf
								WHERE
									qf.uid = #{uid}
								AND a.uid = qf.follow_uid
								AND qf.del_flag = '0'
							)
					) b
				ORDER BY
					RAND()
				LIMIT 2
			) c,
			system_user su,
			qx_history_answer qha
		WHERE
			c.uid = su.uid
		AND c.uid = qha.uid
		AND qha.gid = #{gid}
	</select>
	<select id="getRandomTwentyUser" resultMap="randomTwoUserList">
		SELECT
			c.uid,
			su.nickname,
			su.headimgurl,
			qha.qid,
			qha.answer
		FROM
			(
				SELECT
					b.uid
				FROM
					(
						SELECT
							a.uid
						FROM
							(
								SELECT
									qh.uid
								FROM
									qx_history qh
								WHERE
									qh.gid = #{gid}
								AND qh.uid != #{uid}
								AND qh.del_flag = '0'
								ORDER BY qh.create_time DESC
								LIMIT 200
							) a
						WHERE
							NOT EXISTS (
								SELECT
									qf.follow_uid
								FROM
									qx_follow qf
								WHERE
									qf.uid = #{uid}
								AND a.uid = qf.follow_uid
								AND qf.del_flag = '0'
							)
					) b
				ORDER BY
					RAND()
				LIMIT 20
			) c,
			system_user su,
			qx_history_answer qha
		WHERE
			c.uid = su.uid
		AND c.uid = qha.uid
		AND qha.gid = #{gid}
	</select>
</mapper>